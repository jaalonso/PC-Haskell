#+TITLE: Cap. 1: Introducción
#+LANGUAGE: es

* Contenido                                                        :TOC_2_gh:
 - [[#lenguajes-de-programación][Lenguajes de programación]]
 - [[#entrada-y-salida][Entrada y salida]]
 - [[#cálculo-numéricos][Cálculo numéricos]]
   - [[#aritmética-modular][Aritmética modular]]
   - [[#aritmética-decimal][Aritmética decimal]]
 - [[#abreviación-de-código][Abreviación de código]]
 - [[#matemáticas-][Matemáticas ]]
   - [[#fórmulas-de-sumas][Fórmulas de sumas]]
   - [[#teoría-de-conjuntos][Teoría de conjuntos]]
   - [[#lógica][Lógica]]
   - [[#funciones][Funciones]]
 - [[#p24][P24]]

* Lenguajes de programación

+ En este proyecto los códigos de los programas estarán en Haskell.

* Entrada y salida

+ La plantilla para los problemas de competición es
#+BEGIN_SRC haskell
main :: IO ()
main = interact solucion

solucion :: String -> String
solucion = escribeSalida . resuelve . leeEntrada

leeEntrada :: String -> TA
leeEntrada = undefined

resuelve :: TA -> TB
resuelve = undefined

escribeSalida :: TB -> String
escribeSalida = undefined
#+END_SRC

* Cálculo numéricos

** Aritmética modular

+ Ejemplo de aritmética modular: factorial módulo.
#+BEGIN_SRC haskell
-- ---------------------------------------------------------------------
-- Definir la función
--    factorialMod :: Integer -> Integer -> Integer
-- tal que (factorialMod n x) es el factorial de x módulo n. Por ejemplo,
--    factorialMod (7+10^9) 100       ==  437918130
--    factorialMod (7+10^9) (5*10^6)  ==  974067448
-- ---------------------------------------------------------------------

import Data.List (foldl')

-- 1ª definición
-- =============

factorialMod :: Integer -> Integer -> Integer
factorialMod n x =
  factorial x `mod` n

-- (factorial x) es el factorial de x. Por ejemplo,
--    factorial 3  ==  6
factorial :: Integer -> Integer
factorial x = product [1..x]

-- 2ª definición
-- =============

factorialMod2 :: Integer -> Integer -> Integer
factorialMod2 n x =
  foldl' (prodMod n) 1 [1..x]

-- (prodMod n x y) es el producto de x e y módulo n. Por ejemplo,
--    prodMod 3 4 7  ==  1
--    prodMod 5 4 7  ==  -- 3
prodMod :: Integer -> Integer -> Integer -> Integer
prodMod n x y =
  ((x `mod` n) * (y `mod` n)) `mod` n
  
-- Comparación de eficiencia
-- =========================

--    λ> factorialMod (7+10^9) (5*10^4)
--    737935835
--    (2.62 secs, 2,601,358,640 bytes)
--    λ> factorialMod2 (7+10^9) (5*10^4)
--    737935835
--    (0.07 secs, 23,471,880 bytes)
#+END_SRC

** Aritmética decimal

+ Se puede elegir el número de decimales con ~printf~. Por ejemplo,
#+BEGIN_EXAMPLE
λ> x = 1/7
λ> x
0.14285714285714285
λ> import Text.Printf (printf)
λ> printf "El valor de x con 2 decimales es %.2f\n" x
El valor de x con 2 decimales es 0.14
λ> printf "El valor de x con 3 decimales es %.3f\n" x
El valor de x con 3 decimales es 0.143
#+END_EXAMPLE

* Abreviación de código

+ Se puede abreviar el código definiendo tipos de datos. Por ejemplo
#+BEGIN_SRC haskell
type Punto = (Double,Double)

distancia :: Punto -> Double
distancia (x,y) = sqrt (x^2 + y^2) 
#+END_SRC

* Matemáticas 

** Fórmulas de sumas

+ Sumas de naturales consecutivos.
+ Sumas de cuadrados de naturales consecutivos.
+ Sumas de progresiones aritméticas.
+ Sumas de progresiones geométricas.

** Teoría de conjuntos

+ Notación de conjuntos: {3,2,5}.
+ Conjunto vacío: ∅
+ Números de elementos de un conjunto: |S|
+ Pertenencia: x ∈ S, x ∉ S.
+ Intersección: A ∩ B.
+ Unión: A ∪ B.
+ Diferencia: A ⧵ B
+ Subconjunto: A ⊆ B.
+ Conjunto potencia.
+ Conjuntos numéricos: naturales, enteros, racionales, reales.
+ Definiciones de conjuntos por comprensión.

** Lógica

+ Valores de verdad.
+ Conectivas.
+ Tablas de verdad.
+ Predicados.
+ Cuantificadores.

** Funciones

+ Funciones suelo (~floor~) y techo (~ceiling~)
#+BEGIN_EXAMPLE
λ> floor (3/2)
1
λ> ceiling (3/2)
2
#+END_EXAMPLE

+ Funciones ~minimum~ y ~maximum~
#+BEGIN_EXAMPLE
λ> minimum [2,1,5,3]
1
λ> maximum [2,1,5,3]
5
#+END_EXAMPLE

* P24
